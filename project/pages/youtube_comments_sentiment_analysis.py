# -*- coding: utf-8 -*-
"""Youtube Comments Sentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Va6Okqx_Ayw6B_imPqjr4SItxVXelps3
"""
# import comment_analysis
# from models import Feed

# from apiclient.discovery import build
from googleapiclient.discovery import build
import nltk 
import re

ucom = []

def load_comments(match):
    for item in match["items"]:
        comment = item["snippet"]["topLevelComment"]
        author = comment["snippet"]["authorDisplayName"]
        text = comment["snippet"]["textDisplay"]
        print("Comment by user {}: {}".format(author, text))
        ucom.append(text)
    return ucom

def get_comment_threads(youtube, video_id, limit):
    results = youtube.commentThreads().list(
        part="snippet",
        maxResults=limit,
        videoId=video_id,
        textFormat="plainText"
    ).execute()
    return results

def get_comment_thread(youtube, video_id, mytoken, limit):
    results = youtube.commentThreads().list(
        part="snippet",
        maxResults=limit,
        videoId=video_id,
        textFormat="plainText",
        pageToken=mytoken
    ).execute()
    return results

def remove_emoji(string):
    emoji_pattern = re.compile("["
                           u"\U0001F600-\U0001F64F"  # emoticons
                           u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                           u"\U0001F680-\U0001F6FF"  # transport & map symbols
                           u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                           u"\U00002702-\U000027B0"
                           u"\U000024C2-\U0001F251"
                           "]+", flags=re.UNICODE)
    return emoji_pattern.sub(r'', string)

def fetch_Comments_API(vid):
  filtered_comments=[]
  YOUTUBE_API_SERVICE_NAME = "youtube"
  YOUTUBE_API_VERSION = "v3"
  youtube = build(YOUTUBE_API_SERVICE_NAME,
                YOUTUBE_API_VERSION,
                developerKey="AIzaSyD8yBwWczgXzTacfhDK1lWTGK6nUH7JIUo")
  # ucom = []
  limit1 = 100
  # limit = int(input("Enter number of comments: "))
  limit = 10
  # vid = input("Enter video id: ")
  video_id = vid

  if limit>100:
    if limit%100==0:
      count=limit/100-1
    else:
      count=limit/100
  else:
    count=0
    limit1=limit
    
  match = get_comment_threads(youtube, video_id, limit1)
  next_page_token = match["nextPageToken"]
  ucom=load_comments(match)

  while count>0:
      if count==1:
        match1 = get_comment_thread(youtube, video_id, next_page_token, (limit-(limit/100)*100))
      else:    
        match1 = get_comment_thread(youtube, video_id, next_page_token, 100)
      next_page_token = match1["nextPageToken"]
      load_comments(match1)
      count=count-1
  for comment in ucom:
    com = remove_emoji(comment)
    filtered_comments.append(com)
  print(filtered_comments)

  print(len(filtered_comments))
  return filtered_comments




  # !pip install emoji






# comment_analysis.analysis(filtered_comments)
